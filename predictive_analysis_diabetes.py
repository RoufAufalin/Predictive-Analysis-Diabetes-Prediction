# -*- coding: utf-8 -*-
"""Predictive Analysis : Diabetes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15F1ZhJyCHWjf57NHCwl1rZt8nBa_NJsZ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

"""# Data Loading"""

df = pd.read_csv('/content/diabetes.csv')
df

"""# EDA (Exploratory Data Analysis)"""

df.info()

df.describe()

"""## Univariate Analysis

"""

# Set style
sns.set(style="whitegrid")

# Visualisasi histogram tiap fitur
df.hist(bins=20, figsize=(15, 12), color='skyblue', edgecolor='black')
plt.suptitle('Univariate Analysis - Histogram Tiap Variabel', fontsize=16)
plt.tight_layout()
plt.show()

"""## Bivariate Analysis Dengan Target Outcome"""

fitur = ['Glucose', 'BloodPressure', 'BMI', 'Age', 'Insulin', 'Outcome']

# Pairplot
sns.pairplot(df[fitur], hue='Outcome', palette='husl', diag_kind='kde')
plt.suptitle('Pairplot Multivariate Analysis', y=1.02)
plt.show()

"""## Korelasi antar Fitur"""

# Hitung korelasi
correlation = df.corr()

# Visualisasi korelasi
plt.figure(figsize=(10, 8))
sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix antar Fitur')
plt.show()

"""# Data Preparation

## Data Cleaning
"""

# Daftar kolom yang tidak mungkin bernilai nol
cols_with_zero_invalid = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']

# Ganti nilai 0 dengan NaN
df[cols_with_zero_invalid] = df[cols_with_zero_invalid].replace(0, np.nan)

# Cek jumlah missing value
df[cols_with_zero_invalid].isnull().sum()

# Imputasi nilai NaN dengan median
df[cols_with_zero_invalid] = df[cols_with_zero_invalid].fillna(df[cols_with_zero_invalid].median())

df.isnull().sum()

"""## Data Splitting"""

# Pisahkan fitur dan target
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Split data: 80% training, 20% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Cek jumlah data
print("jumlah data: ", len(X))
print("Jumlah data latih:", len(X_train))
print("Jumlah data uji:", len(X_test))

"""## Standarisasi"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

# Fitting hanya pada data latih, lalu transform kedua set
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Konversi kembali ke DataFrame agar lebih mudah dibaca
X_train_scaled = pd.DataFrame(X_train_scaled, columns=X.columns)
X_test_scaled = pd.DataFrame(X_test_scaled, columns=X.columns)

"""# Modelling"""

# Inisialisasi seluruh model
logreg = LogisticRegression(random_state=42)
dtree = DecisionTreeClassifier(random_state=42)
rf = RandomForestClassifier(random_state=42)

# Melatih dengan data training
logreg.fit(X_train_scaled, y_train)
dtree.fit(X_train_scaled, y_train)
rf.fit(X_train_scaled, y_train)

# Prediksi
y_pred_logreg = logreg.predict(X_test_scaled)
y_pred_dtree = dtree.predict(X_test_scaled)
y_pred_rf = rf.predict(X_test_scaled)

"""## Evaluasi"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Fungsi untuk menampilkan hasil evaluasi model
def evaluate_model(y_true, y_pred, model_name):
    print(f"Evaluasi Model: {model_name}")
    print(f"Akurasi   : {accuracy_score(y_true, y_pred):.4f}")
    print(f"Precision : {precision_score(y_true, y_pred):.4f}")
    print(f"Recall    : {recall_score(y_true, y_pred):.4f}")
    print(f"F1-Score  : {f1_score(y_true, y_pred):.4f}")
    print("\nClassification Report:")
    print(classification_report(y_true, y_pred))
    print("-" * 50)

# Evaluasi Logistic Regression
evaluate_model(y_test, y_pred_logreg, "Logistic Regression")

# Evaluasi Decision Tree
evaluate_model(y_test, y_pred_dtree, "Decision Tree")

# Evaluasi Random Forest
evaluate_model(y_test, y_pred_rf, "Random Forest")

"""## Fitur Importance"""

import pandas as pd
import matplotlib.pyplot as plt

# Mengambil nilai importance fitur dari model random forest
importances = rf.feature_importances_

# Membuat DataFrame agar lebih mudah dipahami
feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': importances
})

# Urutkan berdasarkan nilai importance dari yang terbesar
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

print(feature_importance_df)

# Visualisasi dengan bar plot
plt.figure(figsize=(10,6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.gca().invert_yaxis()
plt.title('Feature Importance dari Random Forest')
plt.xlabel('Importance')
plt.show()